// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var $charStats, $completed, $current, $dash, $game, $path, charSource, checkOffQuest, dailyTimer, dashSource, handleChar, handleDash, handlePath, pathSource, questTimerUpdate, socket, updateDashboard;
    socket = io.connect();
    charSource = $('#char-stats').html();
    dashSource = $('#dash-board').html();
    pathSource = $('#path-chosen').html();
    handleChar = Handlebars.compile(charSource);
    handleDash = Handlebars.compile(dashSource);
    handlePath = Handlebars.compile(pathSource);
    Handlebars.registerHelper("each_upto", function(ary, max, options) {
      var i, result;
      if (!ary || ary.length === 0) {
        return options.inverse(this);
      }
      result = [];
      i = max;
      while (i > 0) {
        if (ary[i] !== void 0) {
          result.push(options.fn(ary[i]));
        }
        --i;
      }
      return result.join("");
    });
    $dash = $('#dashBoard');
    $completed = $('#completedQuests');
    $current = $('#currentQuests');
    $charStats = $('#charStats');
    $game = $('#gameAch');
    $current = $('#currentQuests');
    $path = $('#currentPath');
    $('.questName').hallo({
      editable: true
    });
    $('.dailyName').hallo({
      editable: true
    });
    updateDashboard = function(char) {
      $dash.html(handleDash(char));
      $charStats.html(handleChar(char));
      return $path.html(handlePath(char));
    };
    checkOffQuest = function(type, el) {
      var expGain, questDone, questName;
      questDone = $(el).parent();
      questName = $(el).next().text();
      if (type === 'quest') {
        expGain = Math.floor(Math.random() * 25 + 1);
      } else {
        expGain = Math.floor(Math.random() * 60 + 1);
      }
      console.log(questName);
      return questDone.fadeOut('slow', function() {
        return socket.emit('finish' + type, {
          user: currentUser,
          questName: questName,
          expGain: expGain
        });
      });
    };
    setInterval(function() {
      return questTimerUpdate();
    }, 1000);
    questTimerUpdate = function() {
      return $('.quest').each(function() {
        var currTime, issueTime, wait, waitConv;
        currTime = moment().format('X');
        console.log('c', currTime);
        issueTime = $(this).find('.questTimer').attr('data-time');
        console.log('i', issueTime);
        wait = currTime - issueTime;
        console.log('w', wait);
        waitConv = moment(issueTime * 1000).fromNow();
        console.log('wc', waitConv);
        return $(this).find('.questTimer').text(waitConv);
      });
    };
    dailyTimer = function() {
      return $('.daily').each(function() {
        var currTime, hp, issueTime, wait;
        currTime = moment().format('X');
        issueTime = $(this).attr('data-time');
        wait = currTime - issueTime;
        if (wait > 100) {
          hp = currentUser.health - 20;
          return socket.emit('damage', {
            user: currentUser,
            HP: hp
          });
        }
      });
    };
    dailyTimer();
    $.get('/charData', {}, function(userCharacter) {
      console.log(userCharacter);
      updateDashboard(userCharacter);
      $('.questName').hallo({
        editable: true
      });
      $('.dailyName').hallo({
        editable: true
      });
      return window.currentUser = userCharacter;
    });
    $(document).on('click', '.choosePath', function() {
      $('#pathChooser').fadeOut();
      return $.get('/charData', {}, function(userCharacter) {
        return updateDashboard(userCharacter);
      });
    });
    $(document).on('click', '.addQuest', function() {
      $('.currentQuestList').append($('<li class="quest list-unstyled"><div class="questStatus"></div><span class="questName">Enter a new Quest</span><div class="questTimer pull-right text-muted"></div></li>'));
      return $('.questName').hallo({
        editable: true
      });
    });
    $(document).on('click', '.addDaily', function() {
      $('.dailyQuestList').append($('<li class="daily list-unstyled"><div class="dailyStatus"></div><span class="dailyName">Enter a new Daily</span></li>'));
      return $('.dailyName').hallo({
        editable: true
      });
    });
    $(document).on('halloactivated', '.questName', function() {
      var quest;
      quest = $(this).text();
      return $.post('/removeQuest', {
        questName: quest
      }, function() {});
    });
    $(document).on('hallodeactivated', '.questName', function() {
      var quest;
      $(this).fadeOut('fast').fadeIn('fast');
      quest = $(this).text();
      return $.post('/updateQuest', {
        questName: quest
      }, function() {});
    });
    $(document).on('halloactivated', '.dailyName', function() {
      var daily;
      daily = $(this).text();
      return $.post('/removedaily', {
        dailyName: daily
      }, function() {});
    });
    $(document).on('hallodeactivated', '.dailyName', function() {
      var daily;
      $(this).fadeOut('fast').fadeIn('fast');
      daily = $(this).text();
      return $.post('/updateDaily', {
        dailyName: daily
      }, function() {});
    });
    $(document).on('click', '.questStatus', function() {
      return checkOffQuest('Quest', this);
    });
    $(document).on('click', '.dailyStatus', function() {
      return checkOffQuest('Daily', this);
    });
    $(document).on('mouseenter', '.quest, .daily', function() {
      return $(this).addClass('animated pulse');
    });
    $(document).on('mouseleave', '.quest, .daily', function() {
      return $(this).removeClass('animated pulse');
    });
    socket.on('updateChar', function(character) {
      console.log(character);
      updateDashboard(character);
      return window.currentUser = character;
    });
  });

}).call(this);
