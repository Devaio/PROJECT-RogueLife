// Generated by CoffeeScript 1.6.3
(function() {
  var LocalStrategy, OpenIDStrategy, SteamStrategy, User, app, ensureAuthenticated, express, http, mongoose, passport, path, routes, server, user;

  express = require('express');

  routes = require('./../routes');

  user = require('./../routes/user');

  http = require('http');

  path = require('path');

  passport = require("passport");

  LocalStrategy = require("passport-local").Strategy;

  OpenIDStrategy = require('passport-openid').Strategy;

  SteamStrategy = require('passport-steam').Strategy;

  mongoose = require('mongoose');

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + '/../views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.cookieParser('your secret here'));

  app.use(express.session());

  app.use(app.router);

  app.use(require('stylus').middleware(__dirname + '/../public'));

  app.use(express["static"](path.join(__dirname, '/../public')));

  app.use(passport.initialize());

  app.use(passport.session());

  mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds053148.mongolab.com:53148/heroku_app18992266');

  User = mongoose.model('User', {
    steamName: String,
    charName: String,
    description: String,
    experience: Number
  });

  ensureAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
      return next;
    }
    res.redirect('/login');
  };

  passport.serializeUser(function(user, done) {
    done(null, user);
  });

  passport.deserializeUser(function(obj, done) {
    dont(null, obj);
  });

  passport.use(new SteamStrategy({
    returnURL: 'http://roguelife.herokuapp.com/auth/steam/return',
    realm: 'http://roguelife.herokuapp.com/'
  }, function(identifier, done) {
    User.findByOpenID({
      openId: identifier
    }, function(err, user) {
      return done(err, user);
    });
  }));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/', function(req, res) {
    res.render('index');
  });

  app.get('/login', function(req, res) {
    res.render('login');
  });

  server = http.createServer(app);

  server.listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

  app.get('/auth/steam', passport.authenticate('steam', function(req, res) {}));

  app.get('/auth/steam/callback', passport.authenticate('steam', {
    failureRedirect: '/login'
  }, function(req, res) {
    res.redirect('/');
  }));

}).call(this);
