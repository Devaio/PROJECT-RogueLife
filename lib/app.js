// Generated by CoffeeScript 1.6.3
(function() {
  var LocalStrategy, MongoURI, OpenIDStrategy, SteamStrategy, User, app, ensureAuthenticated, express, http, mongoose, passport, path, routes, server, user, _ref;

  express = require('express');

  routes = require('./../routes');

  user = require('./../routes/user');

  http = require('http');

  path = require('path');

  passport = require("passport");

  LocalStrategy = require("passport-local").Strategy;

  OpenIDStrategy = require('passport-openid').Strategy;

  SteamStrategy = require('passport-steam').Strategy;

  mongoose = require('mongoose');

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + '/../views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.cookieParser('your secret here'));

  app.use(express.session({
    secret: 'Soilwork'
  }));

  app.use(app.router);

  app.use(require('stylus').middleware(__dirname + '/../public'));

  app.use(express["static"](path.join(__dirname, '/../public')));

  app.use(passport.initialize());

  app.use(passport.session());

  server = http.createServer(app);

  server.listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

  MongoURI = (_ref = process.env.MONGOLAB_URI) != null ? _ref : 'mongodb://localhost/roguelife';

  mongoose.connect(MongoURI);

  User = mongoose.model('User', {
    steamName: String,
    username: String,
    email: String,
    password: String,
    description: String,
    experience: Number,
    tasks: Array
  });

  ensureAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
      return next;
    }
    res.redirect('/login');
  };

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {
    User.findById(id, function(err, user) {
      done(err, user);
    });
  });

  passport.use(new LocalStrategy(function(username, password, done) {
    User.findOne({
      username: username
    }, function(err, user) {
      if (err) {
        console.log('err', err);
        return done(err);
      }
      if (!user) {
        console.log('!user', user);
        return done(null, false);
      }
      if (user.password !== password) {
        console.log('pass', user.password, password);
        return done(null, false);
      }
    });
  }));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/', function(req, res) {
    res.render('index');
  });

  app.get('/login', function(req, res) {
    res.render('login');
  });

  app.get('/dash', function(req, res) {
    res.render('dash');
  });

  app.post('/signin', passport.authenticate('local'), function(req, res) {
    console.log('req.user: ', req.user);
    req.login(user, function(err) {
      if (err) {
        return next(err);
      }
      return res.redirect('/');
    });
  });

  app.post('/signup', function(req, res) {
    console.log(req.body);
    user = new User({
      steamName: 'Not Linked',
      email: req.body.email,
      password: req.body.password,
      username: req.body.username,
      description: ' the Ambitious',
      experience: 0
    });
    console.log(user._id);
    user.save(function(err) {
      if (err) {
        return res.send(err);
      } else {
        return User.findById(user['_id'], function(err, userData) {
          return res.send({
            success: "Success!",
            user: userData
          });
        });
      }
    });
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

}).call(this);
