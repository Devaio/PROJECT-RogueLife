// Generated by CoffeeScript 1.6.3
(function() {
  var Character, LocalStrategy, MongoURI, OpenIDStrategy, SteamStrategy, app, express, fs, http, moment, mongoose, passport, path, pathTasks, routes, server, user, _ref;

  express = require('express');

  routes = require('./../routes');

  user = require('./../routes/user');

  http = require('http');

  path = require('path');

  passport = require('passport');

  fs = require('fs');

  LocalStrategy = require("passport-local").Strategy;

  OpenIDStrategy = require('passport-openid').Strategy;

  SteamStrategy = require('passport-steam').Strategy;

  mongoose = require('mongoose');

  app = express();

  pathTasks = require('./pathtasks');

  moment = require('moment');

  moment().format();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + '/../views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(require('stylus').middleware(__dirname + '/../public'));

  app.use(express.methodOverride());

  app.configure(function() {
    app.use(express["static"](path.join(__dirname, '/../public')));
    app.use(express.cookieParser('catboard key'));
    app.use(express.bodyParser());
    app.use(express.session());
    app.use(passport.initialize());
    app.use(passport.session());
    return app.use(app.router);
  });

  server = http.createServer(app);

  server.listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

  MongoURI = (_ref = process.env.MONGOLAB_URI) != null ? _ref : 'mongodb://localhost/roguelife';

  mongoose.connect(MongoURI);

  /* PASSPORT*/


  app.isAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
      return next();
    }
    return res.redirect('/login');
  };

  passport.serializeUser(function(user, done) {
    return done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {
    return Character.findById(id, function(err, user) {
      return done(err, user);
    });
  });

  passport.use(new LocalStrategy(function(username, password, done) {
    return Character.findOne({
      username: username
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, {
          message: 'Incorrect username'
        });
      }
      if (password !== user.password) {
        return done(null, false, {
          message: 'Incorrect password'
        });
      }
      return done(null, user);
    });
  }));

  passport.use(new SteamStrategy({
    returnURL: 'http://127.0.0.1:3000/auth/steam/return',
    realm: 'http://http://127.0.0.1:3000/'
  }, function(identifier, done) {
    Character.findByOpenID({
      openId: identifier
    }, function(err, user) {});
    if (err) {
      return done(err);
    }
    if (!user) {
      return done(null, false, {
        message: 'Incorrect username'
      });
    }
    if (password !== user.password) {
      return done(null, false, {
        message: 'Incorrect password'
      });
    }
    return done(null, user);
  }));

  Character = mongoose.model('Character', {
    username: {
      type: String,
      required: true,
      unique: true
    },
    email: {
      type: String,
      required: true,
      unique: true
    },
    password: {
      type: String,
      required: true
    },
    openID: {
      type: String
    },
    health: {
      type: Number,
      "default": 100
    },
    currentHealth: {
      type: Number,
      "default": 100
    },
    mana: {
      type: Number,
      "default": 50
    },
    currentMana: {
      type: Number,
      "default": 50
    },
    experience: {
      type: Number,
      "default": 0
    },
    level: {
      type: Number,
      "default": 1
    },
    currentQuests: {
      type: Array,
      "default": []
    },
    completedQuests: {
      type: Array,
      "default": []
    },
    dailies: {
      type: Array,
      "default": []
    },
    path: {
      type: String
    },
    avatar: {
      type: String
    }
  });

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/', function(req, res) {
    return res.render('index', {
      userCharacter: req.user
    });
  });

  app.get('/login', function(req, res) {
    return res.render('login');
  });

  app.post('/signin', passport.authenticate('local'), function(req, res) {
    console.log(req.user.username);
    return res.send({
      redirect: '/users/' + req.user._id,
      charData: req.user
    });
  });

  app.get('/charData', app.isAuthenticated, function(req, res) {
    return res.send(req.user);
  });

  app.get('/users/:id', app.isAuthenticated, function(req, res) {
    console.log('USER IN DASH', req.user);
    return Character.find({
      username: req.user.username
    }, function(err, data) {
      if (err) {
        return console.log('error', err);
      } else {
        console.log('char', data);
        return res.render('dash', {
          userCharacter: data[0],
          dailies: pathTasks.dailies
        });
      }
    });
  });

  app.get('/login', function(req, res) {
    return res.render('login');
  });

  app.post('/signup', function(req, res) {
    return Character.findOne({
      username: req.body.username
    }, function(err, user) {
      var newUser;
      if (user) {
        return res.send('Already a user!');
      } else {
        newUser = new Character({
          email: req.body.email,
          password: req.body.password,
          username: req.body.username
        });
        newUser.save();
        console.log('UserID', newUser._id);
        return res.redirect('success!');
      }
    });
  });

  app.post('/chosenpath', function(req, res) {
    console.log('user', req.user);
    console.log('BODY PATH', req.body.path);
    Character.update({
      username: req.user.username
    }, {
      $set: {
        path: req.body.path
      }
    }, function(err, char) {
      char = char[0];
      console.log('CHAR!!!', char);
      if (err) {
        return console.log('error choosepath', err);
      }
    });
    return res.send('success!');
  });

  app.post('/addQuest', function(req, res) {
    Character.update({
      username: req.user.username
    }, {
      $push: {
        currentQuests: {
          questName: req.body.currentQuest,
          startQuest: moment()
        }
      }
    }, function(err, char) {
      if (err) {
        return console.log('error questadd', err);
      }
    });
    return res.send('new quest!');
  });

  app.post('/addDaily', function(req, res) {
    Character.update({
      username: req.user.username
    }, {
      $push: {
        dailies: req.body.daily
      }
    }, function(err, char) {
      if (err) {
        return console.log('error dailyadd', err);
      }
    });
    return res.send('new daily!');
  });

  app.get('/auth/steam/', passport.authenticate('steam'), function(req, res) {
    res.redirect('/');
  });

  app.get('/auth/steam/callback', passport.authenticate('steam'), function(req, res) {
    console.log('auth steam cb', req.user);
    res.redirect('/');
  });

  app.get('/auth/steam/return', function(req, res) {
    console.log('steam user', req.user);
    res.redirect('/');
  });

  app.get('/logout', function(req, res) {
    req.logOut();
    return res.redirect('/');
  });

}).call(this);
