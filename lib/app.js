// Generated by CoffeeScript 1.6.3
(function() {
  var Character, GoogleStrategy, LocalStrategy, MongoURI, app, client, express, fs, http, io, ip, moment, mongoose, passport, path, pathTasks, randomDaily, routes, sendgrid, server, socketUpdateChar, user, userNotification, _ref, _ref1;

  express = require('express');

  routes = require('./../routes');

  user = require('./../routes/user');

  http = require('http');

  path = require('path');

  passport = require('passport');

  fs = require('fs');

  LocalStrategy = require("passport-local").Strategy;

  mongoose = require('mongoose');

  GoogleStrategy = require('passport-google').Strategy;

  pathTasks = require('./pathtasks');

  moment = require('moment');

  io = require('socket.io');

  client = require('twilio')('AC36f2d68f70b9ad20c70ef3f94918f1f4', '87e6de7ba3dfd2bedef2555e04eae90e');

  sendgrid = require('sendgrid')('Devaio', 'ragnarok14');

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + '/../views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(require('stylus').middleware(__dirname + '/../public'));

  app.use(express.methodOverride());

  app.configure(function() {
    app.use(express["static"](path.join(__dirname, '/../public')));
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.session({
      secret: 'catboard key'
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    return app.use(app.router);
  });

  server = http.createServer(app);

  io = io.listen(server);

  server.listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

  MongoURI = (_ref = process.env.MONGOLAB_URI) != null ? _ref : 'mongodb://localhost/roguelife';

  mongoose.connect(MongoURI);

  /* PASSPORT*/


  app.isAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
      return next();
    }
    return res.redirect('/login');
  };

  passport.serializeUser(function(user, done) {
    return done(null, user._id);
  });

  passport.deserializeUser(function(id, done) {
    return Character.findOne({
      _id: id
    }, function(err, user) {
      return done(err, user);
    });
  });

  ip = (_ref1 = process.env.IP) != null ? _ref1 : 'http://localhost:3000';

  passport.use(new LocalStrategy(function(username, password, done) {
    return Character.findOne({
      username: username
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, {
          message: 'Incorrect username'
        });
      }
      if (password !== user.password) {
        return done(null, false, {
          message: 'Incorrect password'
        });
      }
      return done(null, user);
    });
  }));

  passport.use(new GoogleStrategy({
    returnURL: ip + '/auth/google/return',
    realm: ip
  }, function(identifier, profile, done) {
    return process.nextTick(function() {
      Character.find({
        openId: identifier
      }, function(err, user) {
        var newChar;
        done(err, user[0]);
        if (user.length === 0) {
          newChar = new Character({
            openId: identifier,
            username: profile.displayName,
            email: profile.emails[0]['value']
          });
          newChar.save();
        }
      });
    });
  }));

  Character = mongoose.model('Character', {
    username: {
      type: String,
      required: true,
      unique: true
    },
    openId: {
      type: String
    },
    email: {
      type: String,
      required: true,
      unique: true
    },
    password: {
      type: String
    },
    phone: {
      type: String
    },
    health: {
      type: Number,
      "default": 100
    },
    currentHealth: {
      type: Number,
      "default": 100
    },
    hpPerc: {
      type: Number,
      "default": 100
    },
    experience: {
      type: Number,
      "default": 0
    },
    level: {
      type: Number,
      "default": 1
    },
    maxExperience: {
      type: Number,
      "default": 150
    },
    expPerc: {
      type: Number
    },
    currentQuests: {
      type: Array,
      "default": []
    },
    completedQuests: {
      type: Array,
      "default": []
    },
    dailies: {
      type: Array,
      "default": []
    },
    preDaily: {
      type: Array,
      "default": []
    },
    path: {
      type: String
    },
    avatar: {
      type: String
    }
  });

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  userNotification = function(char, hp) {
    if (hp === 'low') {
      sendgrid.send({
        to: char.email,
        from: 'admin@roguelife.herokuapp.com',
        subject: 'Your character has low health!',
        text: 'Greetings ' + char.username + '!\n Be careful!  Your character is running dangerously low on health.  Complete your daily tasks to avoid death!'
      }, function(err, json) {
        return console.log('JSON!!!:', json);
      });
      if (char.phone) {
        return client.sendMessage({
          to: char.phone,
          from: '+18133585022',
          body: 'Greetings ' + char.username + '!\n Be careful!  Your character is running dangerously low on health.  Complete your daily tasks to avoid death!'
        }, function(err, resData) {
          return console.log(resData);
        });
      }
    } else {
      sendgrid.send({
        to: char.email,
        from: 'admin@roguelife.herokuapp.com',
        subject: 'Your character has low health!',
        text: 'Greetings ' + char.username + '!\n It seems your lack of commitment has gotten your character killed! Your levels and experience have been reset.  Complete your daily tasks to avoid death!'
      }, function(err, json) {
        return console.log('JSON!!!:', json);
      });
      if (char.phone) {
        return client.sendMessage({
          to: char.phone,
          from: '+18133585022',
          body: 'Greetings ' + char.username + '!\n It seems your lack of commitment has gotten your character killed! Your levels and experience have been reset. Complete your daily tasks to avoid death!'
        }, function(err, resData) {
          return console.log(resData);
        });
      }
    }
  };

  app.get('/', function(req, res) {
    console.log(req.user);
    return res.render('index', {
      userCharacter: req.user
    });
  });

  app.get('/login', function(req, res) {
    return res.render('login');
  });

  app.get('/logout', function(req, res) {
    req.logOut();
    return res.redirect('/');
  });

  app.get('/about', function(req, res) {
    return res.render('about', {
      userCharacter: req.user
    });
  });

  app.get('/topcharacters', function(req, res) {
    Character.find({}, function(err, topChar) {
      topChar.sort(function(a, b) {
        return b.level - a.level;
      });
      return global.leaderChars = topChar;
    });
    return res.render('topcharacters', {
      topChar: leaderChars
    });
  });

  app.post('/signin', passport.authenticate('local'), function(req, res) {
    console.log(req.user.username);
    return res.send({
      redirect: '/users/' + req.user._id,
      charData: req.user
    });
  });

  app.get('/charData', app.isAuthenticated, function(req, res) {
    return res.send(req.user);
  });

  app.get('/users', app.isAuthenticated, function(req, res) {
    return res.redirect('/users/' + req.user._id);
  });

  app.get('/users/:id', app.isAuthenticated, function(req, res) {
    return Character.find({
      username: req.user.username
    }, function(err, data) {
      if (err) {
        return console.log('error', err);
      } else {
        console.log('char', data);
        return res.render('dash', {
          userCharacter: data[0],
          dailies: pathTasks.dailies
        });
      }
    });
  });

  app.get('/login', function(req, res) {
    return res.render('login');
  });

  app.post('/signup', function(req, res) {
    return Character.findOne({
      username: req.body.username
    }, function(err, user) {
      var newUser;
      console.log('PHONE STUFS', req.body.phone.replace(/[^\w\s]/gi, ''));
      if (user) {
        return res.send({
          message: 'Already a user!'
        });
      } else {
        newUser = new Character({
          email: req.body.email,
          password: req.body.password,
          username: req.body.username,
          phone: '+1' + req.body.phone.replace(/[^\w\s]/gi, '')
        });
        newUser.save();
        console.log('UserID', newUser._id);
        return res.redirect('/');
      }
    });
  });

  app.post('/chosenpath', app.isAuthenticated, function(req, res) {
    console.log('user', req.user);
    console.log('BODY PATH', req.body.path);
    Character.findOneAndUpdate({
      username: req.user.username
    }, {
      path: req.body.path,
      avatar: req.body.path
    }, function(err, char) {
      var pushDailyName;
      pushDailyName = randomDaily(pathTasks.Dailies, char.path);
      return Character.findOneAndUpdate({
        username: req.user.username
      }, {
        $set: {
          preDaily: [
            {
              preDailyName: pushDailyName,
              preDailyStart: moment().format('X'),
              finished: false
            }
          ]
        }
      }, function(err, char) {
        char['dailies'].push(pushDaily);
        char.markModified('dailies');
        char.save();
        console.log('CHAR!!!', char);
        if (err) {
          return console.log('error choosepath', err);
        }
      });
    });
    return res.send('success!');
  });

  app.post('/removeQuest', function(req, res) {
    Character.update({
      username: req.user.username
    }, {
      $pull: {
        currentQuests: {
          questName: req.body.questName
        }
      }
    }, function(err, char) {
      if (err) {
        return console.log('err remove', err);
      }
    });
    return res.send('removed');
  });

  app.post('/updateQuest', function(req, res) {
    Character.update({
      username: req.user.username
    }, {
      $push: {
        currentQuests: {
          questName: req.body.questName,
          startQuest: moment().format('X')
        }
      }
    }, function(err, char) {});
    return res.send('updated');
  });

  app.post('/removeDaily', function(req, res) {
    Character.update({
      username: req.user.username
    }, {
      $pull: {
        dailies: {
          dailyName: req.body.dailyName
        }
      }
    }, function(err, char) {
      if (err) {
        return console.log('err remove', err);
      }
    });
    return res.send('removed');
  });

  app.post('/updateDaily', function(req, res) {
    Character.update({
      username: req.user.username
    }, {
      $push: {
        dailies: {
          dailyName: req.body.dailyName,
          startDaily: moment().format('X')
        }
      }
    }, function(err, char) {});
    return res.send('updated');
  });

  /* GOOGLE*/


  app.get('/auth/google', passport.authenticate('google'));

  app.get('/auth/google/return', passport.authenticate('google', {
    session: true,
    successRedirect: '/users/',
    failureRedirect: '/login'
  }));

  socketUpdateChar = function(data, socket) {
    return Character.findOneAndUpdate({
      username: data.user.username
    }, {
      $inc: {
        experience: data.expGain
      }
    }, function(err, char) {
      var expPerc, expUp, hpPerc, levelUp;
      levelUp = char.level;
      expUp = char.maxExperience;
      expPerc = (char.experience / char.maxExperience) * 100;
      hpPerc = (char.currentHealth / char.health) * 100;
      if (char.experience > expUp && char.currentHealth < (char.health - 5)) {
        Character.findOneAndUpdate({
          username: data.user.username
        }, {
          $inc: {
            health: 5,
            currentHealth: 5,
            level: 1,
            maxExperience: Math.floor((levelUp * expUp) * .5)
          },
          $set: {
            experience: 0,
            expPerc: 1
          }
        }, function(err, char) {});
      } else if (char.experience > expUp) {
        Character.findOneAndUpdate({
          username: data.user.username
        }, {
          $inc: {
            health: 5,
            level: 1,
            maxExperience: (levelUp * expUp) * .5
          },
          $set: {
            experience: 0,
            expPerc: 1
          }
        }, function(err, char) {});
      }
      Character.findOneAndUpdate({
        username: data.user.username
      }, {
        $set: {
          expPerc: expPerc,
          hpPerc: hpPerc
        }
      }, function(err, char) {});
      return Character.find({
        username: data.user.username
      }, function(err, char) {
        var charToUpdate;
        charToUpdate = char[0];
        return socket.emit('updateChar', charToUpdate);
      });
    });
  };

  randomDaily = function(randDaily, path) {
    var listLength, newDaily, pathList, randPick;
    pathList = randDaily[path];
    listLength = pathList.length;
    randPick = Math.floor(Math.random() * listLength);
    newDaily = pathList[randPick];
    return newDaily;
  };

  /* SOCKETS*/


  user = {};

  io.sockets.on('connection', function(socket) {
    user[socket.id] = socket.id;
    socket.on('finishQuest', function(data) {
      Character.findOneAndUpdate({
        username: data.user.username
      }, {
        $pull: {
          currentQuests: {
            questName: data.questName
          }
        }
      }, function(err, char) {});
      Character.findOneAndUpdate({
        username: data.user.username
      }, {
        $push: {
          completedQuests: data.questName
        }
      }, function(err, char) {});
      return socketUpdateChar(data, socket);
    });
    socket.on('finishDaily', function(data) {
      return Character.findOne({
        username: data.user.username
      }, {}, function(err, char) {
        return char['dailies'].forEach(function(daily) {
          if (daily.dailyName === data.questName) {
            daily.finished = true;
            daily.startDaily = moment().format('X');
            char.markModified('dailies');
            char.save();
            return socketUpdateChar(data, socket);
          }
        });
      });
    });
    socket.on('finishpreDaily', function(data) {
      return Character.findOne({
        username: data.user.username
      }, {}, function(err, char) {
        return char['preDaily'].forEach(function(daily) {
          if (daily.preDailyName === data.questName) {
            daily.finished = true;
            daily.startPreDaily = moment().format('X');
            char.markModified('preDaily');
            char.save();
            return socketUpdateChar(data, socket);
          }
        });
      });
    });
    socket.on('damage', function(data) {
      Character.findOneAndUpdate({
        username: data.user.username
      }, {
        $inc: {
          currentHealth: -15
        }
      }, function(err, char) {});
      return Character.findOne({
        username: data.user.username
      }, {}, function(err, char) {
        char['dailies'].forEach(function(daily) {
          daily.startDaily = moment().format('X');
          return daily.finished = false;
        });
        char['preDaily'].forEach(function(daily) {
          daily.startPreDaily = moment().format('X');
          return daily.finished = false;
        });
        char['hpPerc'] = (char.currentHealth / char.health) * 100;
        if (char.hpPerc <= 33 && char.hpPerc > 0) {
          userNotification(char);
        }
        char.markModified('preDaily');
        char.markModified('dailies');
        char.markModified('hpPerc');
        char.save();
        return socket.emit('damageTaken', char);
      });
    });
    socket.on('daily', function(data) {
      var pushDaily;
      pushDaily = randomDaily(pathTasks.Dailies, data.user.path);
      return Character.findOneAndUpdate({
        username: data.user.username
      }, {
        $set: {
          preDaily: [
            {
              preDailyName: pushDaily,
              preDailyStart: moment().format('X'),
              finished: false
            }
          ]
        }
      }, function(err, char) {});
    });
    return socket.on('death', function(data) {
      console.log('DATADEATH', data);
      return Character.findOneAndUpdate({
        username: data.username
      }, {
        $set: {
          currentHealth: 100,
          health: 100,
          level: 1,
          experience: 0,
          maxExperience: 150,
          hpPerc: 100,
          expPerc: 0
        }
      }, function(err, char) {
        console.log('deadCHAR', char);
        userNotification(char);
        return socket.emit('dead', char);
      });
    });
  });

}).call(this);
